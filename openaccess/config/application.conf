###############################################################
## 'User' settings. Change these before starting the node
###############################################################

akka {
  remote.netty.tcp {
	  # Hostname or IP address of this node.
	  # It should be externally visible to accept connections from others
		hostname = "192.168.142.20"
		port = 2551
	}
	cluster {
	  # Dynamic settings are read from settings.conf on the first seed-node
	  # when the cluster starts.
    seed-nodes = [
      "akka.tcp://ClusterSystem@192.168.142.20:2551",
      "akka.tcp://ClusterSystem@192.168.142.20:2552"
    ]

		# Minimum number of members in the cluster.
		# The cluster won't start until that many nodes are connected.
		min-nr-of-members = 1
	}

	loglevel = "INFO"
}

###############################################################
## 'System' settings. You should not need to change these
###############################################################

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  log-config-on-start = off
  log-dead-letters = 0
  log-dead-letters-during-shutdown = off

  remote {
    log-remote-lifecycle-events = off
    ## enable this setting and change the size if you need different datagram size
    ## netty.tcp.maximum-frame-size = 128000b
    # Added to cope with >200 paths subscriptions from single clients
    system-message-buffer-size = 10000
  }

    cluster {
      auto-down-unreachable-after = 30 seconds
    	#virtual-nodes-factor = 500
    	## I have had to remove this pending investigation, it breaks on Solaris
    	#use-dispatcher = dispatchers.cluster-dispatcher
    }

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    deployment {
      /subscriptionRouter {
        router = broadcast
        nr-of-instances = 100
        cluster {
          enabled = on
          routees-path = "/user/emfActor"
          allow-local-routees = on
        }
      }
    }

    serializers {
      oa-serialiser = "com.itrsgroup.openaccess.serialise.Serialiser"
    }

    serialization-bindings {
      "com.itrsgroup.openaccess.dataset.DataSetChange" = oa-serialiser
      "com.itrsgroup.openaccess.dataview.DataViewChange" = oa-serialiser
      "com.itrsgroup.openaccess.commands.CommandExecutionChange" = oa-serialiser
      "com.itrsgroup.openaccess.commands.CommandSet" = oa-serialiser
      "com.itrsgroup.activemodel.statetree.StateTreeChange" = oa-serialiser
      "com.itrsgroup.openaccess.AuthData" = oa-serialiser
    }
  }
}

dispatchers {
  self-monitoring-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 1
      parallelism-factor = 1.0
      parallelism-max = 4
    }
    throughput = 100
  }

  cluster-dispatcher {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-max = 4
    }
  }
}

deque.mailbox-type = akka.dispatch.UnboundedDequeBasedMailbox

geneos {
	# "geneos-emf" or "geneos-emf-orb2"
	native.lib = "geneos-emf-orb2"
	# 0 finds a free port
	emf.listenPort = 0
	file.monitor.interval = 3000
	strict-versions = false

  gateway-assigner: geneos.consistent-hash-assigner

  divide-by-nodes-assigner {
    type: DivideByNodes
  }

  round-robin-assigner {
    type: RoundRobin
  }

  consistent-hash-assigner {
    type: ConsistentHash
    virtual-nodes-factor: 10
  }
}

###############################################################
## Kamon monitor settings, for diagnostic use only
## For this to work you must set the jvm flag:
## -javaagent:/path/to/aspectjweaver-1.5.4.jar
###############################################################
//kamon
//{
//  metrics {
//    tick-interval = 10 seconds
//    filters = [
//      {
//        actor{
//          includes = ["*"]
//          excludes = []
//        }
//      }
//      {
//        dispatcher{
//          includes = ["*"]
//          excludes = []
//        }
//      }
//      {
//        router{
//          includes = ["*"]
//          excludes = []
//        }
//      }
//    ]
//  }
//  geneos {
//    host: "192.168.220.45"
//    port: 7036
//    entity = "single-machine-monitor-probe"
//    sampler = "single-machine-node-api"
//    actors = yes
//    dispatchers = yes
//    routers = yes
//  }
//}
