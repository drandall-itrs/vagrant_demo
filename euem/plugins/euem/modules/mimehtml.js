/*!
 * Geneos End User Experience Monitoring (EUEM)
 * Copyright (c) 2012 ITRS Group Plc
 *
 */

var MimeHTML = function (opts) {
    'use strict';
    
    /**
     * Break String to Multiple Lines based on Width
     */
    this.wrapString = function(str, width) {
        var splitted_str = "";
        
        while(str.length > width) {
            var chunk = str.substr(0, width);
            splitted_str = splitted_str + chunk + '\n';	
            str = str.substr(width, str.length);
        }
        splitted_str = splitted_str + str + '\n';	
        return splitted_str;
    };
    
    /**
     * Convert String to Byte Array
     */
    this.convertToBytes = function(data) {
        var bytes = [];
        for (var i = 0; i < data.length; ++i) {
            bytes.push(data.charCodeAt(i));
        }
        
        return bytes;
    };
    
    /**
     * Convert to Mime Escape
     */
    this.escapeCharacter = function(data) {
        var hex_value = data.toString(16);
        hex_value = (hex_value.length === 1) ? '0' + hex_value : hex_value;
        hex_value = ('=' + hex_value.toUpperCase());
        
        return hex_value;
    };
    
    /**
     * Encode Quoted Printable
     */
    this.encodeQuotedPrintable = function(bytes) {
        var quotedPrintable = '';
        var linecounter = 0;
        var lastbyte = 0;
        var last_break = 0;
        for (var i = 0; i <  bytes.length; ++i) {
            var data = bytes[i];
            
            if( data === 13 || data === 10 ) {
                linecounter = 0;
                if(( lastbyte === 9 || lastbyte === 32 )) {
                    quotedPrintable = quotedPrintable.substr(0, quotedPrintable.length - 1);
                    quotedPrintable += this.escapeCharacter(lastbyte);
                }
                quotedPrintable += String.fromCharCode(data);
            } else {
                var next_data = '';
                if( (data < 32 || data > 126 || data === 61) && data !== 9 && data !== 32 ) {
                    next_data = this.escapeCharacter(data);
                } else {
                    next_data = data == 9 ? '' : String.fromCharCode(data);
                }
                
                if(( lastbyte === 9 || lastbyte === 32 ) && (linecounter === 73)){
                    quotedPrintable = quotedPrintable.substr(0, quotedPrintable.length - 1);
                    quotedPrintable += this.escapeCharacter(lastbyte) + '=' + String.fromCharCode(13) + String.fromCharCode(10);
                    linecounter = 0;
                } else {
                    if( (linecounter + next_data.length) > 74 ) {
                        quotedPrintable += '=' + String.fromCharCode(13) + String.fromCharCode(10);
                        linecounter = 0;
                    }
                }
                
                quotedPrintable += next_data;
                
                lastbyte = data;
                linecounter+= next_data.length;
            }
        }
        
        return quotedPrintable;
    };
    
    /**
     * Encode Base 64
     */
    this.encodeBase64 = function(str, mimeLimit) {
        var CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var out = "", i = 0, len = str.length, c1, c2, c3;
        while (i < len) {
            c1 = str.charCodeAt(i++) & 0xff;
            if (i == len) {
                out += CHARS.charAt(c1 >> 2);
                out += CHARS.charAt((c1 & 0x3) << 4);
                out += "==";
                break;
            }
            c2 = str.charCodeAt(i++);
            if (i == len) {
                out += CHARS.charAt(c1 >> 2);
                out += CHARS.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4));
                out += CHARS.charAt((c2 & 0xF) << 2);
                out += "=";
                break;
            }
            c3 = str.charCodeAt(i++);
            out += CHARS.charAt(c1 >> 2);
            out += CHARS.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
            out += CHARS.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));
            out += CHARS.charAt(c3 & 0x3F);
        }
        
        return (mimeLimit ? this.wrapString(out, 76) : out);
    };
    
    /**
     * Save Page as MimeHTML/MHT Format
     */
    this.save = function(host, filePath, content, perf) {
        var self = this;
        var boundary = "GENEOS.EUEM." + (new Date()).toISOString();
        
        var mhtFileContent = 'From: "Generated by Geneos EUEM" \n' +
		     'Subject: ' + host.getTitle() + ' \n' +
		     'Date: ' + (new Date()).toISOString() + ' \n' + 
		     'MIME-Version: 1.0 \n'+
		     'Content-Type: multipart/related; \n' +
		     '       type="text/html"; \n' + 
		     '       boundary="----=' + boundary + '" \n' + 
		     '\nThis is a multi-part message in MIME format. \n\n';
        
        mhtFileContent += '------=' + boundary + ' \n' +
			 'Content-Type: text/html; \n' + 
			 'Content-Transfer-Encoding: quoted-printable \n' +
			 'Content-Location: ' + perf.log.pages[0].id + ' \n\n';
        
        mhtFileContent += this.encodeQuotedPrintable(this.convertToBytes(content)) + '\n\n';
            
        perf.log.entries.forEach(function (entry) {
			console.log(entry.request.url);
            var data = host.evaluate(function(url){
                var xhr = new XMLHttpRequest();
                xhr.open("GET", url, false);
                xhr.overrideMimeType("text/plain; charset=x-user-defined");
                xhr.send(null);
                return xhr.responseText;
            }, {
                url: entry.request.url
            });
            
            var transferEncoding = 'quoted-printable';
            if( entry.response.content.mimeType.startsWith('text') ||
                entry.response.content.mimeType.indexOf('javascript') > 0 ){
                    
                data = self.encodeQuotedPrintable(self.convertToBytes(data));
            } else {
                data = self.encodeBase64(data, true);
                transferEncoding = 'base64';
            }
            
            mhtFileContent += '------=' + boundary + ' \n' +
			 'Content-Type: ' + entry.response.content.mimeType + '; \n' + 
			 'Content-Transfer-Encoding: ' + transferEncoding + ' \n' +
			 'Content-Location: ' + entry.request.url + ' \n\n';
            mhtFileContent += data + '\n\n';
		});
        
        mhtFileContent += '\n\n------=' + boundary + '-- \n\n';
        var fs = require('fs');
        fs.write(filePath, mhtFileContent, 'w');
    };
    
};

exports.MimeHTML = MimeHTML;

exports.create = function (opts) {
    'use strict';
    return new MimeHTML(opts);
};

